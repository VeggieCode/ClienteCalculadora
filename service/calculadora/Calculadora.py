#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def sumar(self, numero1, numero2):
        """
        Parameters:
         - numero1
         - numero2

        """
        pass

    def restar(self, minuendo, sustraendo):
        """
        Parameters:
         - minuendo
         - sustraendo

        """
        pass

    def multiplicar(self, factor1, factor2):
        """
        Parameters:
         - factor1
         - factor2

        """
        pass

    def dividir(self, dividendo, divisor):
        """
        Parameters:
         - dividendo
         - divisor

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def sumar(self, numero1, numero2):
        """
        Parameters:
         - numero1
         - numero2

        """
        self.send_sumar(numero1, numero2)
        return self.recv_sumar()

    def send_sumar(self, numero1, numero2):
        self._oprot.writeMessageBegin('sumar', TMessageType.CALL, self._seqid)
        args = sumar_args()
        args.numero1 = numero1
        args.numero2 = numero2
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_sumar(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = sumar_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.calculadoraException is not None:
            raise result.calculadoraException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "sumar failed: unknown result")

    def restar(self, minuendo, sustraendo):
        """
        Parameters:
         - minuendo
         - sustraendo

        """
        self.send_restar(minuendo, sustraendo)
        return self.recv_restar()

    def send_restar(self, minuendo, sustraendo):
        self._oprot.writeMessageBegin('restar', TMessageType.CALL, self._seqid)
        args = restar_args()
        args.minuendo = minuendo
        args.sustraendo = sustraendo
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_restar(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = restar_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.calculadoraException is not None:
            raise result.calculadoraException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "restar failed: unknown result")

    def multiplicar(self, factor1, factor2):
        """
        Parameters:
         - factor1
         - factor2

        """
        self.send_multiplicar(factor1, factor2)
        return self.recv_multiplicar()

    def send_multiplicar(self, factor1, factor2):
        self._oprot.writeMessageBegin('multiplicar', TMessageType.CALL, self._seqid)
        args = multiplicar_args()
        args.factor1 = factor1
        args.factor2 = factor2
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_multiplicar(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = multiplicar_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.calculadoraException is not None:
            raise result.calculadoraException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "multiplicar failed: unknown result")

    def dividir(self, dividendo, divisor):
        """
        Parameters:
         - dividendo
         - divisor

        """
        self.send_dividir(dividendo, divisor)
        return self.recv_dividir()

    def send_dividir(self, dividendo, divisor):
        self._oprot.writeMessageBegin('dividir', TMessageType.CALL, self._seqid)
        args = dividir_args()
        args.dividendo = dividendo
        args.divisor = divisor
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_dividir(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = dividir_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.calculadoraException is not None:
            raise result.calculadoraException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "dividir failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["sumar"] = Processor.process_sumar
        self._processMap["restar"] = Processor.process_restar
        self._processMap["multiplicar"] = Processor.process_multiplicar
        self._processMap["dividir"] = Processor.process_dividir
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_sumar(self, seqid, iprot, oprot):
        args = sumar_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = sumar_result()
        try:
            result.success = self._handler.sumar(args.numero1, args.numero2)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except CalculadoraException as calculadoraException:
            msg_type = TMessageType.REPLY
            result.calculadoraException = calculadoraException
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("sumar", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_restar(self, seqid, iprot, oprot):
        args = restar_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = restar_result()
        try:
            result.success = self._handler.restar(args.minuendo, args.sustraendo)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except CalculadoraException as calculadoraException:
            msg_type = TMessageType.REPLY
            result.calculadoraException = calculadoraException
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("restar", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_multiplicar(self, seqid, iprot, oprot):
        args = multiplicar_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = multiplicar_result()
        try:
            result.success = self._handler.multiplicar(args.factor1, args.factor2)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except CalculadoraException as calculadoraException:
            msg_type = TMessageType.REPLY
            result.calculadoraException = calculadoraException
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("multiplicar", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_dividir(self, seqid, iprot, oprot):
        args = dividir_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = dividir_result()
        try:
            result.success = self._handler.dividir(args.dividendo, args.divisor)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except CalculadoraException as calculadoraException:
            msg_type = TMessageType.REPLY
            result.calculadoraException = calculadoraException
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("dividir", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class sumar_args(object):
    """
    Attributes:
     - numero1
     - numero2

    """


    def __init__(self, numero1=None, numero2=None,):
        self.numero1 = numero1
        self.numero2 = numero2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.numero1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.numero2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sumar_args')
        if self.numero1 is not None:
            oprot.writeFieldBegin('numero1', TType.I32, 1)
            oprot.writeI32(self.numero1)
            oprot.writeFieldEnd()
        if self.numero2 is not None:
            oprot.writeFieldBegin('numero2', TType.I32, 2)
            oprot.writeI32(self.numero2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sumar_args)
sumar_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'numero1', None, None, ),  # 1
    (2, TType.I32, 'numero2', None, None, ),  # 2
)


class sumar_result(object):
    """
    Attributes:
     - success
     - calculadoraException

    """


    def __init__(self, success=None, calculadoraException=None,):
        self.success = success
        self.calculadoraException = calculadoraException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.calculadoraException = CalculadoraException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('sumar_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.calculadoraException is not None:
            oprot.writeFieldBegin('calculadoraException', TType.STRUCT, 1)
            self.calculadoraException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(sumar_result)
sumar_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'calculadoraException', [CalculadoraException, None], None, ),  # 1
)


class restar_args(object):
    """
    Attributes:
     - minuendo
     - sustraendo

    """


    def __init__(self, minuendo=None, sustraendo=None,):
        self.minuendo = minuendo
        self.sustraendo = sustraendo

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.minuendo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.sustraendo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('restar_args')
        if self.minuendo is not None:
            oprot.writeFieldBegin('minuendo', TType.I32, 1)
            oprot.writeI32(self.minuendo)
            oprot.writeFieldEnd()
        if self.sustraendo is not None:
            oprot.writeFieldBegin('sustraendo', TType.I32, 2)
            oprot.writeI32(self.sustraendo)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(restar_args)
restar_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'minuendo', None, None, ),  # 1
    (2, TType.I32, 'sustraendo', None, None, ),  # 2
)


class restar_result(object):
    """
    Attributes:
     - success
     - calculadoraException

    """


    def __init__(self, success=None, calculadoraException=None,):
        self.success = success
        self.calculadoraException = calculadoraException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.calculadoraException = CalculadoraException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('restar_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.calculadoraException is not None:
            oprot.writeFieldBegin('calculadoraException', TType.STRUCT, 1)
            self.calculadoraException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(restar_result)
restar_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'calculadoraException', [CalculadoraException, None], None, ),  # 1
)


class multiplicar_args(object):
    """
    Attributes:
     - factor1
     - factor2

    """


    def __init__(self, factor1=None, factor2=None,):
        self.factor1 = factor1
        self.factor2 = factor2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.factor1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.factor2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('multiplicar_args')
        if self.factor1 is not None:
            oprot.writeFieldBegin('factor1', TType.I32, 1)
            oprot.writeI32(self.factor1)
            oprot.writeFieldEnd()
        if self.factor2 is not None:
            oprot.writeFieldBegin('factor2', TType.I32, 2)
            oprot.writeI32(self.factor2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(multiplicar_args)
multiplicar_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'factor1', None, None, ),  # 1
    (2, TType.I32, 'factor2', None, None, ),  # 2
)


class multiplicar_result(object):
    """
    Attributes:
     - success
     - calculadoraException

    """


    def __init__(self, success=None, calculadoraException=None,):
        self.success = success
        self.calculadoraException = calculadoraException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.calculadoraException = CalculadoraException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('multiplicar_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        if self.calculadoraException is not None:
            oprot.writeFieldBegin('calculadoraException', TType.STRUCT, 1)
            self.calculadoraException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(multiplicar_result)
multiplicar_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'calculadoraException', [CalculadoraException, None], None, ),  # 1
)


class dividir_args(object):
    """
    Attributes:
     - dividendo
     - divisor

    """


    def __init__(self, dividendo=None, divisor=None,):
        self.dividendo = dividendo
        self.divisor = divisor

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dividendo = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.divisor = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('dividir_args')
        if self.dividendo is not None:
            oprot.writeFieldBegin('dividendo', TType.I32, 1)
            oprot.writeI32(self.dividendo)
            oprot.writeFieldEnd()
        if self.divisor is not None:
            oprot.writeFieldBegin('divisor', TType.I32, 2)
            oprot.writeI32(self.divisor)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(dividir_args)
dividir_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'dividendo', None, None, ),  # 1
    (2, TType.I32, 'divisor', None, None, ),  # 2
)


class dividir_result(object):
    """
    Attributes:
     - success
     - calculadoraException

    """


    def __init__(self, success=None, calculadoraException=None,):
        self.success = success
        self.calculadoraException = calculadoraException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.DOUBLE:
                    self.success = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.calculadoraException = CalculadoraException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('dividir_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.DOUBLE, 0)
            oprot.writeDouble(self.success)
            oprot.writeFieldEnd()
        if self.calculadoraException is not None:
            oprot.writeFieldBegin('calculadoraException', TType.STRUCT, 1)
            self.calculadoraException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(dividir_result)
dividir_result.thrift_spec = (
    (0, TType.DOUBLE, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'calculadoraException', [CalculadoraException, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs
